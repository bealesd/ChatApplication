@model List<ChatApplication.Models.Message>
@{
    var chatMessages = Model;
    string who = (string)@ViewData["Who"];
}

<div id="usernameContainer">
    <h2>
        Chatting as
        <select id="setUsername">
            @if (who == "David")
            {
                <option selected value="David">David</option>
                <option value="Esther">Esther</option>
            }
            else if (who == "Esther")
            {
                <option value="David">David</option>
                <option selected value="Esther">Esther</option>
            }
        </select>
    </h2>
</div>

<div id="messagesContainer">
</div>

<div id="messageControls">
    <a onclick="getPrevious10Messages()"><span class="glyphicon glyphicon-arrow-up"></span></a>
    <a onclick="getNewMessages()"><span class="glyphicon glyphicon-arrow-down"></span></a>
</div>

<div id="sendChatForm">
    <textarea rows="1" style="height:2em;" id="chatMessage" maxlength="250" placeholder="type a message"></textarea>
</div>

<div id="messageControlsResponse">
    <p>info</p>
</div>

<script>
    var lastMessageId = "@Guid.Empty"
    var firstMessageId = "@Guid.Empty"
    function getPrevious10Messages() {
        if (document.querySelectorAll("#messagesContainer > div").length === 0) {
            //no messages have been loaded meaning there are no messages
            return;
        }
        firstMessageId = document.getElementById("messagesContainer").children[0].dataset.id;
        get(`Chat/GetChatsBeforeId?firstClientId=${firstMessageId}`).then(function (results) {
            if (results.length > 0) {
                for (var i = results.length -1 ; i >= 0 ; i--) {
                    var messageNode = createMessageNode(results[i]);
                    document.getElementById("messagesContainer").innerHTML = messageNode + document.getElementById("messagesContainer").innerHTML;
                }
            }
            else {
                document.querySelectorAll("#messageControlsResponse > p")[0].innerHTML = "no older messages";
            }
        });
    }

    function getLast10Messages() {
        return get("Chat/GetLastTenChats").then(function (results) {
            if (results.length > 0) {
                for (var i = 0; i < results.length; i++) {
                    var messageNode = createMessageNode(results[i]);
                    document.getElementById("messagesContainer").innerHTML += messageNode;
                }
                lastMessageId = results[results.length - 1]['id'];
            }
            else {
                document.querySelectorAll("#messageControlsResponse > p")[0].innerHTML = "no messages";

            }
        });
    }

    function getNewMessages() {
        return get(`Chat/GetChatsAfterId?lastClientId=${lastMessageId}`).then(function (results) {
            if (results.length > 0) {
                for (var i = 0; i < results.length; i++) {
                    var messageNode = createMessageNode(results[i]);
                    document.getElementById("messagesContainer").innerHTML += messageNode;
                }
                lastMessageId = results[results.length - 1]['id'];
                this.chatHelper.scrollToBottom("messagesContainer");
            }
            else {
                document.querySelectorAll("#messageControlsResponse > p")[0].innerHTML = "no new messages";

            }
        });
    }

    function createMessageNode(message) {
        var cSharpTicksFrom1900 = message['datetime'] / 10000;
        var jsTicksFrom1900To1970 = Math.abs(new Date(0, 0, 1).setFullYear(1));
        var messageDateTime = new Date(cSharpTicksFrom1900 - jsTicksFrom1900To1970);

        var messageNode = `<div data-id=${message['id']} class="${message['who'].toLowerCase()}">
                            <p class="dateTime">${messageDateTime.toUTCString()}</p>
                            <p class="${message['who'].toLowerCase()}Message">${message['content']}</p>
                         </div>`
        return messageNode;
    }

    $(document).ready(function () {
        getLast10Messages().then(function () {
            this.chatHelper.scrollToBottom("messagesContainer")
        }.bind(this));

        document.getElementById("messagesContainer").addEventListener('scroll', function () {
            var curScrollPos = document.getElementById("messagesContainer").scrollTop
            if (curScrollPos === 0) {
                console.log("scrolling up to top");
                getPrevious10Messages();
            }
            if (document.getElementById("messagesContainer").scrollTop + document.getElementById("messagesContainer").clientHeight === document.getElementById("messagesContainer").scrollHeight) {
                getNewMessages();
            }
        }.bind(this));

        loop();

    }.bind(this));

    function loop() {
        setTimeout(function () {
            getNewMessages().then(function () {
                loop();
            }.bind(this));
        }.bind(this), 5000);
    }

    function get(suffix) {
        var getChatsUrl = window.location.origin + '/' + suffix;
        var xhttp = new XMLHttpRequest();
        xhttp.open('GET', getChatsUrl, true);
        xhttp.timeout = 30000;
        xhttp.send();
        return new Promise(function (res, rej) {
            xhttp.onreadystatechange = function () {
                if (this.readyState === 4 && (this.status === 200 || this.status === 201))
                    return res(JSON.parse(this.responseText));
                if (this.readyState === 4 && (this.status !== 200 || this.status !== 201))
                    return rej();
            };
        }.bind(this));
    }

    $("#chatMessage").on("keydown", function () {
        this.chatHelper.updateMessageBox('chatMessage');
    }.bind(this))

    $("#chatMessage").on("keyup", function (event) {
        if (event.keyCode === 13) {
            this.chatHelper.validateAndSendChatMessage("chatMessage");
        }
    }.bind(this));
</script>
